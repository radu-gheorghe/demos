input {
  file {
    path => "/Users/radu/gits/demos/haystack_us_2025/vespa_app/ext/*.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => plain {
      charset => "UTF-8"
    }
  }
}

filter {
  #example lines:
  # A1,2017,12500,Manual,15735,Petrol,150,55.4,1.4
  # A6,2016,16500,Automatic,36203,Diesel,20,64.2,2.0

  csv {
    separator => ","
    columns => ["model", "year", "price", "transmission", "mileage", "fuelType", "tax", "mpg", "engineSize"]
    skip_header => true
    convert => {
      "year" => "integer"
      "price" => "integer"
      "mileage" => "integer"
      "tax" => "integer"
      "mpg" => "float"
      "engineSize" => "float"
    }
  }

  
  mutate {
    # strip whitespace from model
    strip => ["model"]
    # lowercase transmission, fuelType, model
    lowercase => ["transmission", "fuelType", "model"]
  }

  # turn values into features
  ruby {
    code => "
      # price score: 0.0 to 1.0 based on price, with 100000 as ceiling, 0.0 if above ceiling
      price = event.get('price')
      price_score = price <= 100000 ? (100000 - price) / 100000.0 : 0.0
      
      # mileage score: 0.0 to 1.0 based on mileage, with 200000 as ceiling, 0.0 if above ceiling
      mileage = event.get('mileage')
      mileage_score = mileage <= 200000 ? (200000 - mileage) / 200000.0 : 0.0

      # tax score: 0.0 to 1.0 based on tax, with 500 as ceiling, 0.0 if above ceiling
      tax = event.get('tax')
      tax_score = tax <= 500 ? (500 - tax) / 500.0 : 0.0

      # age score: 0.0 to 1.0 for cars 2000 and newer, 0.0 for cars older than 2000
      # Newer is better, so we invert the formula
      year = event.get('year')
      age_score = year >= 2000 ? 1.0 - (2025 - year) / 25.0 : 0.0

      # mpg score: 0.0 to 1.0 based on mpg, with 100 as ceiling, 1.0 if above ceiling
      mpg = event.get('mpg')
      mpg_score = mpg >= 100 ? 1.0 : mpg / 100.0
      
      # Create car_features map only with non-zero values
      car_features = {}
      
      # Add transmission as a feature with score 1.0
      transmission = event.get('transmission').downcase
      if transmission && !transmission.empty?
        car_features[transmission] = 1.0
      end
      
      # Add fuel type as a feature with score 1.0
      fuel_type = event.get('fuelType').downcase
      if fuel_type && !fuel_type.empty?
        car_features[fuel_type] = 1.0
      end
      
      # Add numeric preferences only if they're non-zero
      car_features['age'] = age_score if age_score > 0
      car_features['price'] = price_score if price_score > 0
      car_features['mileage'] = mileage_score if mileage_score > 0
      car_features['tax'] = tax_score if tax_score > 0
      car_features['mpg'] = mpg_score if mpg_score > 0

      # Extract make from filename and add it to preferences
      path = event.get('[log][file][path]')
      make = File.basename(path, '.csv').split(/\d+/).first.downcase
      # add the make as both a proper field and as a preference
      event.set('make', make)
      car_features[make] = 1.0

      # model as a preference, too
      model = event.get('model')
      car_features[model] = 1.0 if model
      
      event.set('car_features', car_features)
    "
  }

  mutate {  
    remove_field => ["@timestamp", "@version", "event", "host", "log", "message"]  
  }
}

output {
  # stdout {
  #   codec => rubydebug
  # }
  vespa_feed {
    document_type => "product"
    namespace => "product"
    vespa_url => "https://dbe4de4d.b0d2b4c8.z.vespa-app.cloud"
    client_cert => "/Users/radu/.vespa/training1.haystack.default/data-plane-public-cert.pem"  
    client_key => "/Users/radu/.vespa/training1.haystack.default/data-plane-private-key.pem"
  }
}
