schema product {

  document product {
    field id type int {
      indexing: attribute | summary
    }

    field title type string {
      indexing: index | summary
      index: enable-bm25
    }

    field description type string {
      indexing: index | summary
      index: enable-bm25
    }

    field category type string {
      indexing: attribute | summary
    }

    field price type float {
      indexing: attribute | summary
    }

    field average_rating type float {
      indexing: attribute | summary
    }
  }

  field titledesc_embedding type tensor<float>(x[384]) {
    indexing {
      (input title || "") . " " . (input description || "") | embed e5 | attribute | index | summary
    }
  }

  # pure vector search
  rank-profile closeness {
    inputs {
      query(query_embedding) tensor<float>(x[384])
    }
    first-phase {
      expression: closeness(field, titledesc_embedding)
    }
  }

  # hybrid search via Reciprocal Rank Fusion
  rank-profile rrf inherits closeness {
    function best_bm25() {
      expression: max(bm25(title), bm25(description))
    }
    global-phase {
      expression {
        reciprocal_rank_fusion(best_bm25, closeness(field, titledesc_embedding))
      }
      rerank-count: 200
    }
  }

  # short summary so we don't return huge documents including embeddings
  document-summary titledesc {
    summary title {}
    summary description {}
  }

}
